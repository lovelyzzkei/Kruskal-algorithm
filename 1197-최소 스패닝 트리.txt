#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

// Union-Find 알고리즘 그대로 사용
int getParent(int parent[], int x);
void unionParent(int parent[], int a, int b);
int findParent(int parent[], int a, int b);

class Edge {
public:
	Edge(int a, int b, int distance);
	int node[2];
	int distance;
	bool operator<(const Edge& edge) const;
};

int main() {
	cin.tie(NULL);
	cin.sync_with_stdio(false);
	cout.sync_with_stdio(false);
	
	int parent[10010];
	int v, e, a, b, c, sum = 0;
	vector<Edge> v1;
	cin >> v >> e;

	// 간선 정보를 벡터에 담음
	for (int i = 0; i < e; i++) {
		cin >> a >> b >> c;
		v1.push_back(Edge(a, b, c));
	}
	sort(v1.begin(), v1.end());

	// 사이클 확인을 위한 사이클 테이블 준비
	for (int i = 1; i <= v; i++) {
		parent[i] = i;
	}

	for (int i = 0; i < v1.size(); i++) {
		// 간선 정보에 담겨있는 두 노드가 사이클이 아니라면 가중치를 더하고 두 노드를 합침
		if (!findParent(parent, v1[i].node[0], v1[i].node[1])) {
			sum += v1[i].distance;
			unionParent(parent, v1[i].node[0], v1[i].node[1]);
		}
	}

	cout << sum << "\n";
	return 0;
}

Edge::Edge(int a, int b, int distance) {
	this->node[0] = a;
	this->node[1] = b;
	this->distance = distance;
}

bool Edge::operator<(const Edge& edge) const {
	return this->distance < edge.distance;
}

int getParent(int parent[], int x) {
	if (parent[x] == x) {
		return x;
	}
	else {
		return parent[x] = getParent(parent, parent[x]);

	}
}

void unionParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if (a < b) {
		parent[b] = a;
	}
	else {
		parent[a] = b;
	}
}

int findParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if (a == b) {
		return 1;
	}
	else {
		return 0;
	}
}